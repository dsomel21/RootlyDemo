<%#
  The `incidents#index` displays all the incidents belonging to the organization in a sleek UI.
  We use a combination of ViewComponents and ERB to build the UI;
  ViewComponents helps build reusable and encapsulated UI components. This page uses:
  - Incidents::ActiveBannerComponent (The big banner at the top `if active_incident.present?`)
  - Incidents::SortControlsComponent (Sorting by `title`, `severity`, `status`, `created_at`)
  - Incidents::IncidentListComponent (grid of cards + empty state)
%>


<div class="min-h-screen bg-gradient-to-br from-gray-950 via-slate-950 to-black">
  <%
    # NOTE: we currently assume only one incident can be active at once. If
    # that changes we may need to show multiple banners.
    # TODO: Design variant for displaying multiple active incidents simultaneously.
    active_incident = @active_incidents.min_by(&:declared_at)
  %>
  <% if active_incident.present? %>
    <%= render Incidents::ActiveBannerComponent.new(incident: active_incident) %>
  <% end %>

  <div class="bg-gradient-to-r from-gray-950/90 via-slate-950/90 to-black/90 backdrop-blur-sm border-b border-purple-500/30">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="py-6">
        <div class="md:flex md:items-center md:justify-between">
          <div class="flex-1 min-w-0">
            <h1 class="text-2xl font-bold leading-7 text-white sm:text-3xl sm:truncate">
              ðŸš¨ Incidents Dashboard
            </h1>
            <p class="mt-1 text-sm text-purple-200">
              Manage and track all incidents across your organization
            </p>
          </div>
          <div class="mt-4 flex md:mt-0 md:ml-4">
            <span class="inline-flex items-center px-3 py-2 border border-purple-400/30 rounded-md text-sm text-white bg-purple-900/30">
              Total: <%= @incidents.count %> incidents
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative">
    <div class="absolute inset-0 bg-[linear-gradient(to_right,rgba(139,92,246,0.3)_1px,transparent_1px),linear-gradient(to_bottom,rgba(139,92,246,0.3)_1px,transparent_1px)] bg-[size:20px_20px] opacity-10 -z-10"></div>

    <%= turbo_frame_tag "incidents_list" do %>
      <div class="bg-gray-950/80 backdrop-blur-sm border border-purple-500/30 shadow-xl overflow-hidden sm:rounded-2xl">
        <div class="bg-gray-950/60 px-4 py-3 border-b border-purple-500/30 sm:px-6">
          <div class="flex flex-wrap items-center justify-between">
            <h3 class="text-lg leading-6 font-medium text-white">
              Incidents List
            </h3>
            <%= render Incidents::SortControlsComponent.new %>
          </div>
        </div>

        <%= render Incidents::IncidentListComponent.new(incidents: @incidents) %>
      </div>
    <% end %>
  </div>
</div>

<style>
  @keyframes sheen { 0% { transform: translateX(-100%);} 100% { transform: translateX(100%);} }
  @keyframes rise { 0% { opacity:0; transform: translateY(6px) scale(.985);} 100% { opacity:1; transform: translateY(0) scale(1);} }
  @keyframes pulseDot { 0% { transform: scale(1); opacity: .8;} 100% { transform: scale(2.1); opacity: 0;} }
  @keyframes bottomGlow { 0%, 100% { opacity: 0; } 50% { opacity: 0.8; } }
  @keyframes bottomGlowBlur { 0%, 100% { opacity: 0; transform: translateX(-50%) scale(0.8); } 50% { opacity: 0.6; transform: translateX(-50%) scale(1.1); } }
  @keyframes pulseSlow { 0%, 100% { opacity: 0; } 50% { opacity: 0.3; } }
  @keyframes pulseSubtle { 0%, 100% { opacity: 0.5; } 50% { opacity: 1; } }
  @keyframes pulseSubtleGreen { 0%, 100% { box-shadow: 0 0 5px rgba(34, 197, 94, 0.3); } 50% { box-shadow: 0 0 15px rgba(34, 197, 94, 0.6); } }
  @keyframes pulseSubtleOrange { 0%, 100% { box-shadow: 0 0 5px rgba(249, 115, 22, 0.3); } 50% { box-shadow: 0 0 15px rgba(249, 115, 22, 0.6); } }

  .animate-pulse-slow { animation: pulseSlow 3s ease-in-out infinite; }
  .animate-pulse-subtle { animation: pulseSubtle 2s ease-in-out infinite; }
  .animate-pulse-subtle-green { animation: pulseSubtleGreen 2s ease-in-out infinite; }
  .animate-pulse-subtle-orange { animation: pulseSubtleOrange 2s ease-in-out infinite; }
  @media (prefers-reduced-motion: reduce) {
    * { animation-duration: 0.001ms !important; animation-iteration-count: 1 !important; transition-duration: 0.001ms !important; }
  }
</style>

<script>
  (function () {
    var el = document.querySelector('[data-start-iso]');
    if (!el) return;
    var iso = el.getAttribute('data-start-iso');
    var startEpoch = iso ? Math.floor(new Date(iso).getTime() / 1000) : null;
    if (!startEpoch) return;

    function fmt(n){ return (n < 10 ? '0' : '') + n; }
    function draw(total){
      var h = Math.floor(total / 3600);
      var m = Math.floor((total % 3600) / 60);
      var s = total % 60;
      el.textContent = fmt(h) + ':' + fmt(m) + ':' + fmt(s);
    }
    function tick(){
      var t = Math.max(0, Math.floor(Date.now() / 1000) - startEpoch);
      draw(t);
    }
    tick();
    setInterval(tick, 1000);
  })();
</script>
